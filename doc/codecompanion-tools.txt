*codecompanion-tools.txt*  For Neovim >= 0.8.0       Last change: 2024

CODECOMPANION-TOOLS                                     *codecompanion-tools*

A comprehensive collection of advanced tools and extensions for CodeCompanion.nvim
designed to enhance your AI-powered coding workflow with intelligent automation
and productivity features through a modern adapter architecture.

Author: CodeCompanion Tools Contributors
License: MIT License

==============================================================================
CONTENTS                                        *codecompanion-tools-contents*

1. Introduction ........................ |codecompanion-tools-introduction|
2. Installation ........................ |codecompanion-tools-installation|
3. Configuration ....................... |codecompanion-tools-configuration|
4. Architecture ........................ |codecompanion-tools-architecture|
5. Rule Manager ........................ |codecompanion-tools-rule-manager|
6. Model Toggle ........................ |codecompanion-tools-model-toggle|
7. DAG Checklist System ................ |codecompanion-tools-dag-system|
8. Context Compression ................. |codecompanion-tools-context-compression|
9. Commands ............................ |codecompanion-tools-commands|
10. API ................................ |codecompanion-tools-api|
11. Troubleshooting .................... |codecompanion-tools-troubleshooting|
12. Changelog .......................... |codecompanion-tools-changelog|

==============================================================================
INTRODUCTION                                *codecompanion-tools-introduction*

codecompanion-tools.nvim is a comprehensive collection of advanced tools and
extensions for CodeCompanion.nvim, designed to enhance your AI-powered coding
workflow with intelligent automation and productivity features through a modern
adapter architecture.

This extension provides a suite of sophisticated tools that seamlessly 
integrate with CodeCompanion through a clean modular adapter system:

- Intelligent Rule Management: Automatically discover and apply project-specific AI rules with pre-submit updates
- Flexible Model Switching: Quick and easy switching between different LLM models with per-buffer memory
- Advanced DAG Task Management: Complex workflow orchestration with dependency resolution and parallel execution
- Smart Context Compression: Intelligent chat context optimization with automatic triggers and quality preservation

All tools are designed to work automatically in the background while providing
manual control when needed, utilizing a unified configuration system and
centralized tool registration for optimal performance and maintainability.

==============================================================================
INSTALLATION                                *codecompanion-tools-installation*

This plugin requires CodeCompanion.nvim to be installed and configured first.

Using lazy.nvim: >
    {
      "olimorris/codecompanion.nvim",
      dependencies = {
        "your-username/codecompanion-tools.nvim"
      },
      config = function()
        require("codecompanion").setup({
          extensions = {
            ["codecompanion-tools"] = {
              opts = {
                -- Configuration options go here
              },
            },
          },
        })
      end,
    }
<

Using packer.nvim: >
    use {
      "olimorris/codecompanion.nvim",
      requires = {
        "your-username/codecompanion-tools.nvim"
      },
      config = function()
        -- Same configuration as above
      end
    }
<

==============================================================================
CONFIGURATION                              *codecompanion-tools-configuration*

The plugin is configured through CodeCompanion's extension system with a modern
adapter architecture that provides unified configuration management and automatic
tool registration.

Default configuration: >
    {
      extensions = {
        ["codecompanion-tools"] = {
          opts = {
            -- Global debug setting
            debug = false,
            
            -- Rule manager options
            rules = {
              enabled = true,
              debug = false,
              rules_filenames = {
                ".rules",
                ".goosehints",
                ".cursorrules",
                ".windsurfrules",
                ".clinerules",
                ".github/copilot-instructions.md",
                "AGENT.md",
                "AGENTS.md",
                "CLAUDE.md",
                ".codecompanionrules",
              },
              extract_file_paths_from_chat_message = nil,
            },
            
            -- Model toggle options
            model_toggle = {
              enabled = true,
              keymap = "<S-Tab>",
              sequence = {},
              models = {},
            },
            
            -- DAG checklist system options
            dag = {
              enabled = true,
            },
            
            -- Context compression options
            context_compression = {
              enabled = true,
              auto_trigger = true,
              debug = false,
              token_threshold = 8000,
              memory_threshold = 500,
              message_count_threshold = 20,
              primary_strategy = "simple_truncation",
              fallback_strategy = "simple_truncation",
              simple_truncation = {
                keep_recent_messages = 5,
                keep_system_messages = true,
                preserve_context_markers = true,
              },
              ui = {
                auto_notify = true,
                show_compression_stats = true,
              },
            },
          },
        },
      },
    }
<

==============================================================================
ARCHITECTURE                                *codecompanion-tools-architecture*

The plugin follows a modern adapter architecture for optimal performance and
maintainability:

Core Architecture:
- Extension entry point: lua/codecompanion/_extensions/codecompanion-tools/init.lua
- Adapter system: lua/codecompanion_tools/adapters/
- Tool registry: Centralized tool registration with CodeCompanion
- Configuration system: Unified configuration management

Modular Adapter System:
- base_adapter.lua: Common interface for all adapters
- compression_adapter.lua: Context compression functionality
- dag_adapter.lua: DAG checklist system integration

Key Components:
- Rule Manager: Intelligent rule file discovery and management
- Model Toggle: Per-buffer model switching with memory
- DAG System: Complex task management with dependency resolution
- Context Compression: Automatic chat optimization

The adapter architecture provides:
- Clean separation of concerns
- Unified setup and initialization
- Consistent debug logging
- Graceful degradation and error handling
- Automatic tool registration with CodeCompanion

==============================================================================
RULE MANAGER                                *codecompanion-tools-rule-manager*

The rule manager automatically detects and manages rule files for your
project context in CodeCompanion chat buffers with sophisticated timing
and caching mechanisms.

Features:
- Pre-submit rule updates using CodeCompanion's prompt_decorator system
- Automatic rule detection from 10+ AI tools and formats
- Smart context management with fingerprint-based caching
- Multiple rule file format support with customizable filenames
- Intelligent path extraction from chat references and tool outputs
- Sophisticated event handling for various chat states

------------------------------------------------------------------------------
RULE MANAGER OPTIONS                    *codecompanion-tools-rule-manager-opts*

rules.enabled                                   *codecompanion-tools-rules-enabled*
    Type: boolean
    Default: true
    
    Enable or disable the rule manager functionality.

rules.debug                                       *codecompanion-tools-rules-debug*
    Type: boolean
    Default: false
    
    Enable debug logging for rule processing.

rules.rules_filenames                     *codecompanion-tools-rules-filenames*
    Type: table
    Default: See configuration section
    
    List of rule filenames to search for. The manager will look for these
    files in parent directories of referenced files.

rules.extract_file_paths_from_chat_message    *codecompanion-tools-rules-extract*
    Type: function or nil
    Default: nil
    
    Custom function to extract file paths from chat messages. Should return
    a table of file paths.
    
    Example: >
        extract_file_paths_from_chat_message = function(message)
          local paths = {}
          for path in message.content:gmatch("Created: `([^`]+)`") do
            table.insert(paths, path)
          end
          return paths
        end
<

------------------------------------------------------------------------------
RULE MANAGER BEHAVIOR                  *codecompanion-tools-rule-manager-behavior*

The rule manager operates automatically based on these triggers:

1. Pre-submit updates via prompt_decorator (primary)
2. Chat buffer creation
3. Mode change from insert to normal
4. After tool execution
5. Manual trigger via |:CodeCompanionRulesProcess|

Path Collection:
- Chat references (from /file, /buffer commands)
- Tool output patterns in messages
- Custom extraction function results
- Sophisticated pattern matching for various file references

Rule File Search:
- Searches parent directories upward from each referenced file
- Looks for rule files in order of preference
- Prioritizes deeper directories (more specific rules)
- Fingerprint-based caching to avoid redundant processing

Reference Management:
- Adds rule files as pinned references
- Removes obsolete references automatically
- Updates context as needed with intelligent timing
- Per-buffer caching for optimal performance

==============================================================================
MODEL TOGGLE                                *codecompanion-tools-model-toggle*

Quick model switching functionality for CodeCompanion chat buffers.

Features:
- Two switching modes (sequence and models)
- Per-buffer memory
- Customizable keymaps
- Instant notifications

------------------------------------------------------------------------------
MODEL TOGGLE OPTIONS                    *codecompanion-tools-model-toggle-opts*

model_toggle.enabled                       *codecompanion-tools-model-toggle-enabled*
    Type: boolean
    Default: true
    
    Enable or disable the model toggle functionality.

model_toggle.keymap                         *codecompanion-tools-model-toggle-keymap*
    Type: string
    Default: "<S-Tab>"
    
    Keymap to trigger model switching in chat buffers.

model_toggle.sequence                     *codecompanion-tools-model-toggle-sequence*
    Type: table
    Default: {}
    
    Sequence mode configuration. Each entry should have 'adapter' and 'model'
    keys. Only models matching the current adapter will be cycled through.
    
    Example: >
        sequence = {
          { adapter = "copilot", model = "gpt-4" },
          { adapter = "copilot", model = "o1-mini" },
          { adapter = "anthropic", model = "claude-3-5-sonnet-20241022" },
          { adapter = "openai", model = "gpt-4o" },
        }
<

model_toggle.models                         *codecompanion-tools-model-toggle-models*
    Type: table
    Default: {}
    
    Models mode configuration. Keys are adapter names, values are either a
    single model name (string) or a list of model names (table).
    This is ignored if 'sequence' is set.
    
    Example: >
        models = {
          copilot = { "gpt-4", "o1-mini" },
          anthropic = { "claude-3-5-sonnet-20241022", "claude-3-opus-20240229" },
          openai = { "gpt-4o", "gpt-4o-mini" },
        }
<

------------------------------------------------------------------------------
MODEL TOGGLE MODES                      *codecompanion-tools-model-toggle-modes*

Sequence Mode:
- Cycles through a predefined sequence of adapter+model combinations
- Only shows models for your current adapter
- Use CodeCompanion's 'ga' keymap to change adapters first

Models Mode:
- Cycles through models within the same adapter
- Supports single model (string) or multiple models (table) per adapter

==============================================================================
DAG CHECKLIST SYSTEM                          *codecompanion-tools-dag-system*

The DAG (Directed Acyclic Graph) checklist system provides structured task
management with dependency resolution and parallel execution capabilities
through a unified checklist tool interface.

Features:
- Dependency management with cycle detection and validation
- Parallel execution of independent read-only tasks for efficiency
- Task status tracking with rich progress indicators
- Access mode control for safe parallel execution (read/write/readwrite)
- Persistent JSON storage in vim data directory across sessions
- Progress monitoring with completion statistics and visual formatting
- Action-based interface (create, list, status, complete) for intuitive management

------------------------------------------------------------------------------
DAG SYSTEM OPTIONS                         *codecompanion-tools-dag-system-opts*

dag.enabled                                      *codecompanion-tools-dag-enabled*
    Type: boolean
    Default: true
    
    Enable or disable the DAG checklist system functionality.

------------------------------------------------------------------------------
DAG SYSTEM FEATURES                     *codecompanion-tools-dag-system-features*

Dependency Management:
- Define task dependencies to ensure proper execution order
- Automatically blocks tasks until prerequisites are completed
- Detects and prevents circular dependencies

Parallel Execution:
- Tasks marked with mode="read" and no dependencies execute in parallel
- Safe for read-only operations like file analysis and searches
- Improves efficiency by running independent tasks simultaneously

Task Status Tracking:
- pending: Task ready to start
- in_progress: Task currently being worked on
- completed: Task finished successfully
- blocked: Task waiting for dependencies

Access Mode Control:
- read: Safe for parallel execution (analysis, search operations)
- write: Sequential execution required (file modifications)
- readwrite: Sequential execution required (read and modify operations)

Persistent Storage:
- Automatically saves checklists to vim data directory in JSON format
- Restores checklists across Neovim sessions with full state preservation
- Maintains task history and progress logs with rich metadata

------------------------------------------------------------------------------
DAG TOOL                                        *codecompanion-tools-dag-tool*

The DAG system provides a unified checklist tool accessible through CodeCompanion:

checklist                                       *codecompanion-tools-checklist*
    Manage task checklists with dependency resolution and parallel execution.
    
    Actions:
        create: Create a new checklist with tasks and dependencies
        list: List all existing checklists
        status: Get detailed status of a checklist
        complete: Mark a task as complete
    
    Parameters:
        action (string): Required action to perform
        
        For create action:
            goal (string): Description of the overall goal
            tasks (table): Array of task definitions
            subject (string): Commit subject/title
            body (string): Detailed explanation
        
        For status action:
            checklist_id (string, optional): ID of checklist to check
        
        For complete action:
            task_id (string): ID of task to mark complete
            subject (string): Commit subject/title
            body (string): Detailed explanation
            checklist_id (string, optional): ID of checklist to update
    
    Task Definition:
        text (string): Task description
        dependencies (table): Array of task indices that must complete first
        mode (string): "read", "write", or "readwrite"
    
    Examples: >
        -- Create a checklist
        checklist({
          action = "create",
          goal = "Implement authentication system",
          tasks = {
            { text = "Analyze current code", mode = "read", dependencies = {} },
            { text = "Design schema", mode = "readwrite", dependencies = {1} },
            { text = "Write tests", mode = "write", dependencies = {2} },
            { text = "Implement logic", mode = "write", dependencies = {1, 2, 3} }
          },
          subject = "Auth implementation",
          body = "Complete authentication system with dependencies"
        })
        
        -- List all checklists
        checklist({ action = "list" })
        
        -- Get status of a specific checklist
        checklist({ action = "status", checklist_id = "2" })
        
        -- Complete a task
        checklist({
          action = "complete",
          task_id = "1",
          subject = "Completed analysis",
          body = "Analyzed codebase and identified key patterns"
        })
<

==============================================================================
CONTEXT COMPRESSION                    *codecompanion-tools-context-compression*

The context compression system intelligently manages chat context to optimize
performance and memory usage with sophisticated quality assessment and
strategy selection.

Features:
- Smart automatic compression with comprehensive trigger detection
- Multiple compression strategies with fallback support
- Configurable trigger thresholds for token count, memory usage, and message count
- Quality preservation with importance scoring and assessment
- Automatic operation with graceful degradation and strategy chaining

------------------------------------------------------------------------------
CONTEXT COMPRESSION OPTIONS        *codecompanion-tools-context-compression-opts*

context_compression.enabled          *codecompanion-tools-context-compression-enabled*
    Type: boolean
    Default: true
    
    Enable or disable the context compression functionality.

context_compression.auto_trigger      *codecompanion-tools-context-compression-auto*
    Type: boolean
    Default: true
    
    Enable automatic compression when thresholds are exceeded.

context_compression.debug             *codecompanion-tools-context-compression-debug*
    Type: boolean
    Default: false
    
    Enable debug logging for compression operations.

context_compression.token_threshold   *codecompanion-tools-context-compression-token*
    Type: number
    Default: 8000
    
    Token count threshold for triggering compression.

context_compression.memory_threshold  *codecompanion-tools-context-compression-memory*
    Type: number
    Default: 500
    
    Memory usage threshold in MB for triggering compression.

context_compression.message_count_threshold  *codecompanion-tools-context-compression-message*
    Type: number
    Default: 20
    
    Message count threshold for triggering compression.

context_compression.primary_strategy  *codecompanion-tools-context-compression-primary*
    Type: string
    Default: "simple_truncation"
    
    Primary compression strategy to use.

context_compression.fallback_strategy *codecompanion-tools-context-compression-fallback*
    Type: string
    Default: "simple_truncation"
    
    Fallback compression strategy if primary fails.

------------------------------------------------------------------------------
COMPRESSION STRATEGIES              *codecompanion-tools-compression-strategies*

Simple Truncation:
- Keeps recent messages and system messages
- Preserves important context markers
- Fast and reliable compression with quality assessment

Structured Summarization:
- Uses LLM to create intelligent summaries
- Maintains context continuity
- Higher quality but slower with fallback support

Priority-based Truncation:
- Evaluates message importance scoring
- Preserves key information based on importance
- Balanced approach with quality preservation

==============================================================================
COMMANDS                                        *codecompanion-tools-commands*

:CodeCompanionRulesProcess                       *:CodeCompanionRulesProcess*
    Manually re-evaluate rule references in the current buffer.

:CodeCompanionRulesDebug                           *:CodeCompanionRulesDebug*
    Toggle debug logging for the rule manager.

:CodeCompanionRulesEnable                         *:CodeCompanionRulesEnable*
    Enable the rule manager functionality.

:CodeCompanionRulesDisable                       *:CodeCompanionRulesDisable*
    Disable the rule manager functionality.

:CodeCompanionToolsDebug                           *:CodeCompanionToolsDebug*
    Show extension status and registered tools for debugging.

:CodeCompanionDAGDebug                               *:CodeCompanionDAGDebug*
    Debug DAG system state and operations.

:CodeCompanionDAGReset                               *:CodeCompanionDAGReset*
    Reset DAG system state and clear all checklists.

:CodeCompanionCompressNow                         *:CodeCompanionCompressNow*
    Manually trigger context compression for the current buffer.

:CodeCompanionCompressStats                     *:CodeCompanionCompressStats*
    Show context compression statistics and system status.

==============================================================================
API                                                  *codecompanion-tools-api*

The plugin provides the following API functions:

codecompanion-tools.toggle_model({bufnr})        *codecompanion-tools.toggle_model*
    Toggle the model in the specified buffer.
    
    Parameters:
        {bufnr} (number) Buffer number of the CodeCompanion chat buffer
    
    Example: >
        -- Toggle model in current buffer
        require("codecompanion").extensions["codecompanion-tools"].toggle_model(
          vim.api.nvim_get_current_buf()
        )
<

------------------------------------------------------------------------------
BACKWARD COMPATIBILITY                  *codecompanion-tools-backward-compatibility*

The original setup method is still supported: >
    require("codecompanion_tools").setup({
      -- Configuration options
    })
<

This will automatically delegate to the proper extension system through the
adapter architecture, ensuring existing configurations work without modification
while benefiting from the new modular design.

==============================================================================
TROUBLESHOOTING                            *codecompanion-tools-troubleshooting*

Extension Not Loading~
    If you see the error:
    "Error loading extension codecompanion-tools: module 'codecompanion._extensions.codecompanion-tools' not found"
    
    Ensure your directory structure matches:
    lua/codecompanion/_extensions/codecompanion-tools/init.lua

Rule Files Not Being Added~
    1. Enable debug mode: rules = { debug = true }
    2. Check the output for path collection and rule discovery
    3. Verify rule files exist in parent directories of referenced files
    4. Ensure files are within your project root (getcwd())

Model Toggle Not Working~
    1. Verify you're in a CodeCompanion chat buffer (filetype = "codecompanion")
    2. Check that models are configured for your current adapter
    3. Ensure the keymap isn't conflicting with other bindings

DAG Tools Not Available~
    1. Ensure DAG system is enabled: dag = { enabled = true }
    2. Enable debug mode: debug = true
    3. Check that CodeCompanion has loaded the tools properly
    4. Use :CodeCompanionToolsDebug to check tool registration

Context Compression Not Working~
    1. Verify context compression is enabled: context_compression = { enabled = true }
    2. Check threshold settings are appropriate for your use case
    3. Enable debug mode to see compression operations
    4. Monitor chat for automatic compression triggers

==============================================================================
CHANGELOG                                      *codecompanion-tools-changelog*

v2.1.0
    - Major architectural refactoring with modular adapter system
    - Enhanced rule manager with pre-submit updates via prompt_decorator
    - Improved DAG system with unified checklist tool interface
    - Context compression with sophisticated quality assessment
    - Centralized tool registration and configuration management
    - Better error handling and graceful degradation
    - Enhanced debug commands and troubleshooting capabilities

v2.0.0
    - Added context compression system with automatic triggers
    - Improved DAG checklist system with better dependency management
    - Enhanced rule manager with better file detection
    - Added comprehensive configuration system
    - Improved cross-platform compatibility
    - Added debug commands for troubleshooting

v1.1.0
    - Added DAG checklist system with dependency management
    - Parallel execution support for independent tasks
    - Task status tracking and progress monitoring
    - Persistent storage for checklists
    - Cross-platform compatibility improvements

v1.0.0
    - Initial release
    - Rule manager functionality
    - Model toggle functionality
    - CodeCompanion extension integration

==============================================================================
vim:tw=78:ts=8:ft=help:norl: 